### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""DateTime"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  createOneSensorValue(data: SensorValueCreateInput!): SensorValue!
  createOneUser(data: UserCreateInput!): User!
  deleteOneSensorValue(where: SensorValueWhereUniqueInput!): SensorValue
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateOneSensorValue(data: SensorValueUpdateInput!, where: SensorValueWhereUniqueInput!): SensorValue
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  sensorValue(where: SensorValueWhereUniqueInput!): SensorValue
  sensorValues(cursor: SensorValueWhereUniqueInput, orderBy: [SensorValueOrderByInput!], skip: Int, take: Int, where: SensorValueWhereInput): [SensorValue!]!
  user(where: UserWhereUniqueInput!): User
  userCount(where: UserWhereInput): Int
  users(cursor: UserWhereUniqueInput, orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

type SensorValue {
  createdAt: DateTime!
  humidity: Int
  id: Int!
  temperature: Int
  updatedAt: DateTime!
}

input SensorValueCreateInput {
  createdAt: DateTime
  humidity: Int
  temperature: Int
  updatedAt: DateTime
}

input SensorValueOrderByInput {
  createdAt: SortOrder
  humidity: SortOrder
  id: SortOrder
  temperature: SortOrder
  updatedAt: SortOrder
}

input SensorValueUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  humidity: NullableIntFieldUpdateOperationsInput
  temperature: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SensorValueWhereInput {
  AND: [SensorValueWhereInput!]
  NOT: [SensorValueWhereInput!]
  OR: [SensorValueWhereInput!]
  createdAt: DateTimeFilter
  humidity: IntNullableFilter
  id: IntFilter
  temperature: IntNullableFilter
  updatedAt: DateTimeFilter
}

input SensorValueWhereUniqueInput {
  id: Int
}

enum SortOrder {
  asc
  desc
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  email: String
  id: Int!
  image: String
  name: String
  updatedAt: DateTime!
}

input UserCreateInput {
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  image: String
  name: String
  updatedAt: DateTime
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringNullableFilter
  emailVerified: DateTimeNullableFilter
  id: IntFilter
  image: StringNullableFilter
  name: StringNullableFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
